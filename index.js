// Generated by CoffeeScript 1.9.3
var Airscore, balanceScores, calculateSingleScore, getMatchesBy, percentScores;

Airscore = (function() {
  Airscore.prototype.schema = {
    words: {
      type: 'object',
      hasLength: true
    },
    text: {
      type: 'string'
    }
  };

  Airscore.prototype.attributes = {
    words: [],
    text: '',
    tones: []
  };

  function Airscore() {
    return this;
  }

  Airscore.prototype.set = function(key, value) {
    var schema;
    if (this.attributes.hasOwnProperty(key)) {
      schema = this.schema[key];
      if (typeof value !== schema.type) {
        throw new Error('Type expected: ' + schema.type + ', but was: ' + typeof value);
      }
      if (schema.hasLength && typeof value.length !== 'number') {
        throw new Error('Value expected to have length.');
      }
      this.attributes[key] = value;
      if (key === 'text') {
        this.attributes['words'] = this.makeWords(value);
      }
      return this;
    } else {
      throw new Error('This attribute cannot be set.');
    }
  };

  Airscore.prototype.get = function(key) {
    if (this.attributes.hasOwnProperty(key)) {
      return this.attributes[key];
    }
  };

  Airscore.prototype.add = function(key, item) {
    if (key === 'words') {
      this.attributes['words'].push(item);
    }
    return this;
  };

  Airscore.prototype.makeWords = function(text) {
    var words;
    text = text.toLowerCase();
    words = text.replace(/[^\w\s]|_/g, '');
    words = words.replace(/(^\s*)|(\s*$)/gi, '');
    words = words.replace(/[ ]{2,}/gi, ' ');
    words = words.replace(/\n /, '\n');
    return words.split(' ');
  };

  Airscore.prototype.addTone = function(name, indicators) {
    this.attributes.tones.push({
      name: name,
      indicators: indicators
    });
    return this;
  };

  Airscore.prototype.getScore = function(options) {
    var balance, decimals, i, item, len, percent, ref, scores;
    options = options || {};
    balance = options.balance || 'fair';
    percent = options.percent || false;
    if (options.decimals === 0) {
      decimals = options.decimals;
    } else {
      decimals = options.decimals || 2;
    }
    scores = {};
    ref = this.attributes.tones;
    for (i = 0, len = ref.length; i < len; i++) {
      item = ref[i];
      scores[item.name] = calculateSingleScore(this.attributes.words, item, decimals, percent);
    }
    if (!percent) {
      scores = balanceScores(this.attributes.words.length, scores, balance, decimals);
    }
    if (percent) {
      scores = percentScores(scores, decimals, balance, this.attributes.words.length);
    }
    return scores;
  };

  return Airscore;

})();

module.exports = Airscore;

calculateSingleScore = function(words, tone, decimals, percent) {
  var i, indicator, len, matchCount, ref, score;
  score = 0;
  ref = tone.indicators;
  for (i = 0, len = ref.length; i < len; i++) {
    indicator = ref[i];
    matchCount = getMatchesBy(indicator.word, words);
    if (matchCount > 0) {
      indicator.weight = indicator.weight || 1;
      score += indicator.weight * matchCount;
    }
  }
  if (!percent) {
    return score.toFixed(decimals);
  }
  return score;
};

getMatchesBy = function(indicator, words) {
  var i, len, matches, word;
  matches = 0;
  for (i = 0, len = words.length; i < len; i++) {
    word = words[i];
    if (word === indicator) {
      matches++;
    }
  }
  return matches;
};

balanceScores = function(wordCount, scores, balance, decimals) {
  var score, scoreName;
  if (balance === 'fair') {
    for (scoreName in scores) {
      score = scores[scoreName];
      scores[scoreName] = (score / wordCount).toFixed(decimals);
    }
  }
  return scores;
};

percentScores = function(scores, decimals, balance, wordCount) {
  var score, scoreName, sum;
  sum = 0;
  for (scoreName in scores) {
    score = scores[scoreName];
    sum += score;
  }
  if (balance === 'fair') {
    sum = wordCount;
  }
  for (scoreName in scores) {
    score = scores[scoreName];
    scores[scoreName] = ((score / sum) * 100).toFixed(decimals) + '%';
  }
  return scores;
};
